# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
version: '3.8'

services:
  # Combined Laravel App with Nginx
  app:
    image: localhost:5000/csl-certification-rest-api:latest
    container_name: csl-certification-rest-api
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./storage:/var/www/html/storage:delegated
      - ./bootstrap/cache:/var/www/html/bootstrap/cache:delegated
    environment:
      - APP_ENV=${APP_ENV:-staging}
      - APP_DEBUG=${APP_DEBUG:-false}
      # AWS RDS connection settings
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - CONTAINER_ROLE=app
    networks:
      - csl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health/index.php"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  # Queue Worker Service
  queue:
    image: localhost:5000/csl-certification-rest-api:latest
    container_name: csl-certification-rest-api-queue
    restart: unless-stopped
    depends_on:
      app:
        condition: service_started
    volumes:
      - ./storage:/var/www/html/storage
    environment:
      - CONTAINER_ROLE=queue
      # AWS RDS connection settings
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG:-false}
      - QUEUE_CONNECTION=database
    networks:
      - csl-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'supervisord' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      
  # WebSocket Server (Laravel Reverb)
  reverb:
    image: localhost:5000/csl-certification-rest-api:latest
    container_name: csl-certification-rest-api-reverb
    restart: unless-stopped
    depends_on:
      app:
        condition: service_started
    ports:
      - "8085:8080"
    volumes:
      - ./storage:/var/www/html/storage
    environment:
      - CONTAINER_ROLE=reverb
      # AWS RDS connection settings
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG:-false}
      # Reverb configuration
      - REVERB_APP_ID=${REVERB_APP_ID}
      - REVERB_APP_KEY=${REVERB_APP_KEY}
      - REVERB_APP_SECRET=${REVERB_APP_SECRET}
      - REVERB_HOST=0.0.0.0
      - REVERB_PORT=8080
    networks:
      - csl-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'reverb:start' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      
  # Scheduler Service for Order Regularization
  scheduler:
    image: localhost:5000/csl-certification-rest-api:latest
    container_name: csl-certification-rest-api-scheduler
    restart: unless-stopped
    depends_on:
      app:
        condition: service_started
    volumes:
      - ./storage:/var/www/html/storage
    environment:
      - CONTAINER_ROLE=scheduler
      # AWS RDS connection settings
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG:-false}
    networks:
      - csl-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'cron' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      
  # Nightwatch Agent Service
  nightwatch:
    image: localhost:5000/csl-certification-rest-api:latest
    container_name: csl-certification-rest-api-nightwatch
    restart: unless-stopped
    depends_on:
      app:
        condition: service_started
    ports:
      - "2407:2407"
    volumes:
      - ./storage:/var/www/html/storage
    environment:
      - CONTAINER_ROLE=nightwatch
      # AWS RDS connection settings
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG:-false}
      # Nightwatch configuration
      - NIGHTWATCH_TOKEN=${NIGHTWATCH_TOKEN}
      - NIGHTWATCH_REQUEST_SAMPLE_RATE=${NIGHTWATCH_REQUEST_SAMPLE_RATE:-0.1}
    networks:
      - csl-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'nightwatch:agent' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Wiki.js Documentation Service
  wiki-db:
    image: postgres:15-alpine
    container_name: csl-wiki-db
    environment:
      POSTGRES_DB: wiki
      POSTGRES_PASSWORD: ${WIKI_DB_PASSWORD:-wikijsrocks}
      POSTGRES_USER: ${WIKI_DB_USER:-wikijs}
    restart: unless-stopped
    volumes:
      - wiki-db-data:/var/lib/postgresql/data
    networks:
      - csl-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "wikijs"]
      interval: 10s
      timeout: 5s
      retries: 5

  wiki:
    image: ghcr.io/requarks/wiki:2
    container_name: csl-wiki
    depends_on:
      wiki-db:
        condition: service_healthy
    environment:
      DB_TYPE: postgres
      DB_HOST: wiki-db
      DB_PORT: 5432
      DB_USER: ${WIKI_DB_USER:-wikijs}
      DB_PASS: ${WIKI_DB_PASSWORD:-wikijsrocks}
      DB_NAME: wiki
    restart: unless-stopped
    ports:
      - "8090:3000"
    volumes:
      - ./wiki-data:/wiki/data
      - ./wiki-uploads:/wiki/uploads
    networks:
      - csl-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  csl-network:
    driver: bridge

volumes:
  wiki-db-data:
    driver: local
